<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Ausf&#252;hren von Bootstrap mit Unternehmensdaten &#8211; FAQ </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Ausf&#252;hren von Bootstrap mit Unternehmensdaten &#8211; FAQ ">
    <meta name="generator" content="docfx 2.56.6.0">
    <meta name="description" content="Hier erhalten Sie Informationen dazu, wie Sie Daten in Dataverse oder anderen Dynamics 365-Apps mit Unternehmensinformationen laden, bevor Sie die Verbindung f&#252;r duales Schreiben aktivieren.">
    <link rel="shortcut icon" href="../../../../favicon.ico">
    <link rel="stylesheet" href="../../../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../../../styles/docfx.css">
    <link rel="stylesheet" href="../../../../styles/main.css">
    <meta property="docfx:navrel" content="">
    <meta property="docfx:tocrel" content="../../toc.html">
    <meta name="searchOption" content="noindex">
    
    
    <meta name="robots" content="NOINDEX, NOFOLLOW">
    
    <meta name="ms.search.scope" content="Core, Operations, CrossApp, ShowInHelp">
    <meta name="ms.search.region" content="global">
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../../../../index.html">
                <img id="logo" class="svg" src="../../../../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        <div class="row">
          <div class="col-sm-12">
            
<div class="sidenav hide-when-search"> 
  <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
  <div class="sidetoggle collapse" id="sidetoggle">
    <div id="sidetoc"></div>
  </div>
</div>
            <div class="row toc-offset">
              
              <div class="col-sm-12 col-md-9">
                <article class="article" id="_content" data-uid="">
<h1 id="bootstrap-with-company-data-faq" sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="28">Ausführen von Bootstrap mit Unternehmensdaten – FAQ</h1>

[!include[banner](../../includes/banner.md)][!include[rename-banner](~/includes/cc-data-platform-banner.md)]<h2 id="why-do-i-need-bootstrapping" sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="34">Warum benötige ich Bootstrapping?</h2>
<p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="35">Sie verfügen möglicherweise über eine vorhandene Dataverse- oder andere Dynamics 365-App-Instanz mit Geschäftsdaten und möchten die Verbindung für duales Schreiben für diese aktivieren. In diesem Fall müssen Sie ein Bootstrap für Daten in Dataverse oder anderen Dynamics 365-Apps mit Unternehmensinformationen ausführen, bevor Sie die Verbindung für duales Schreiben aktivieren.</p>
<h2 id="when-should-i-use-bootstrapping" sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="37">Wann sollte Bootstrapping verwendet werden?</h2>
<p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="38">Sie sollten Bootstrapping verwenden, bevor Sie Tabellenzuordnungen für duales Schreiben aktivieren (in Schritt 5).</p>
<ol sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="39">
<li sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="39"><p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="39">Um die Verbindung für duales Schreiben zwischen Instanzen der Finance and Operations-App und Dataverse oder einer anderen Dynamics 365-App einzurichten, melden Sie sich bei der Finance and Operations-App als Administrator an.</p>
</li>
<li sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="40"><p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="40">Wechseln Sie zum Modul <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="40">Datenverwaltung</strong>, und klicken Sie auf die Schaltfläche <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="40">Duales Schreiben</strong>. Dadurch wird <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="40">Data Integrator</strong> gestartet.</p>
</li>
<li sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="41"><p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="41">Stellen Sie die Verbindung für duales Schrieben für mindestens ein Unternehmen her.</p>
<div class="mx-imgBorder" sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="42">
<p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="43"><img src="media/dual-write-boot-1.png" sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="43" alt="Herstellen der Verbindung für duales Schreiben"></p>
</div>
</li>
<li sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="44"><p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="44">Aktivieren Sie die Tabellenzuordnung <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="44">Cdm_companies</strong>. Dies synchronisiert Unternehmen aus der Finance and Operations-App zu Dataverse.</p>
<div class="mx-imgBorder" sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="45">
<p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="46"><img src="media/dual-write-boot-2.png" sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="46" alt="Aktivieren der Tabellenzuordnung"></p>
</div>
</li>
<li sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="47"><p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="47">Führen Sie den Beispielbootstrappingcode auf der Dataverse- oder einer anderen Dynamics 365-App-Instanz aus.</p>
</li>
<li sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="48"><p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="48">Nachdem das Bootstrapping abgeschlossen und das System für die Live-Synchronisierung bereit ist, aktivieren Sie die Tabellenzuordnungen.</p>
<p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="50">Durch die Aktivierung von Tabellenzuordnungen wird die Erstsynchronisierung der Daten für die aktivierten Tabellenzuordnungen ausgelöst. Die Daten, die den über die Verbindung für duales Schreiben ausgewählten Unternehmen entsprechen, werden zwischen der Finance and Operations-App und Dataverse synchronisiert.</p>
</li>
</ol>
<h2 id="how-to-i-use-the-code-sample" sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="52">Wie verwende ich das Codebeispiel?</h2>
<p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="53">Der Beispielcode ist eine C#-Anwendung, die Sie in Visual Studio laden können. Es werden NuGet-Paketabhängigkeiten im Dataverse SDK verwendet, die Sie durch standardmäßige Visual Studio-Tools aktualisieren können.</p>
<p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="55">Nachdem Sie die Lösung in Visual Studio entzippt und geöffnet und die NuGet-Pakete wiederhergestellt haben, suchen Sie im Code nach <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="55">TODO</strong>. Jede Entscheidung, die Sie zur Art und Weise der Ausführung von Bootstrapping für Unternehmensinformationen treffen müssen, wird durch ein <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="55">TODO</strong> mit Beispielcode für eine kanonische Implementierung gekennzeichnet.</p>
<p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="57">Der Beispielcode zeigt nur eine von vielen Methoden zum Kategorisieren von Entitätszeilen nach Unternehmen. Wenn Sie die Logik in den <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="57">TODO</strong>-Abschnitten ändern, können Sie Ihre benutzerdefinierte Kategorisierung erstellen.</p>
<h2 id="what-should-i-expect" sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="59">Was sollte ich erwarten?</h2>
<p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="60">Mit der Beispielanwendung können Sie standardmäßig ein Wörterbuch mit Zuordnungen zwischen Geschäftseinheiten und Unternehmenscodes bereitstellen. Jede Entität, für die Sie Bootstrapping mit dem Feld <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="60">OwningBusinessUnit</strong> ausführen, wird automatisch für die Verwendung des angegebenen Unternehmens festgelegt. Jede Entität ohne das Feld <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="60">OwningBusinessUnit</strong>, z. B. Produkt, legt das Unternehmen basierend auf der Zuordnung mit einem leeren Unternehmenseinheitswert fest.</p>
<p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="62">Die Konsolenanwendung erwartet einen Parameter, entweder <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="62">–simulate</strong> oder <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="62">–apply</strong>. Wenn Sie den Befehlszeilenparameter <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="62">– simuliert werden</strong> verwenden, werden keine Daten aktualisiert. Nur <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="62">simulation_<entityname>.csv</entityname></strong>-Dateien werden im selben Verzeichnis wie das Tool generiert, eine für jede Entität, die aktualisiert worden wäre. Sie können diese Dateien während der Arbeit iterativ überprüfen, um sicherzustellen, dass der Code die Unternehmenswerte wie erwartet aktualisiert.</p>
<p sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="64">Verwenden Sie den <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="64">–apply</strong>-Parameter, wenn Sie die simulierten Aktualisierungen abgeschlossen haben. Dadurch werden alle Zeilen, die aktuell einen falschen Unternehmenswert aufweisen, in Stapeln von 1.000 Zeilen gleichzeitig (standardmäßig) aktualisiert. Der Code ist wie angegeben idempotent, d. h. Sie können ihn erneut ausführen, sodass nur die falsch zugeordneten Unternehmen aktualisiert werden. Bei Ausführung mit <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="64">–apply</strong> gibt der Code CSV-Dateien der vorgenommenen Änderungen aus, die als <strong sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="64">applied_<entityname>.csv</entityname></strong> bezeichnet werden.</p>
<pre><code class="lang-csharp" sourcefile="fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md" sourcestartlinenumber="66">using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Tooling.Connector;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;

namespace BootstrapCompany
{
   /// &lt;summary&gt;
   /// Application to bootstrap the company field on existing rows in CDS in preparation for integration to Finance and Operations.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// This application assumes that the target companies already exist in the CDS environment in the cdm_Company table and are
   /// identified by their company code. It also assumes that the current owning business unit of each row should be used
   /// to categorize by company. This logic can easily be updated to utilize alternate sources of categorization including
   /// custom tables, teams, custom fields on tables, or any other data. This code is provided only as a sample. 
   /// 
   /// To utilize this code, update each of the locations currently denoted with a TODO statement.
   /// 
   /// This code is provided AS IS with no warranties or guarantees, and confers no rights.
   /// &lt;/remarks&gt;
   public class Program
   {
       /// &lt;summary&gt;
       /// The number of rows to query and update in CDS in a single operation.
       /// &lt;/summary&gt;
       /// &lt;remarks&gt;
       /// The larger this number, the fewer calls will need to be made, so the faster the updates
       /// will complete. However, larger batch sizes are more likely to cause contention. Additionally,
       /// when SQL exceeds some threshold of locks (generally around 5,000), it will escalate to
       /// an entire table lock, which blocks all other activity in the live system on this table. As 
       /// such, a batch size of around 1,000 is relatively fast, while also relatively safe in terms
       /// of contention and transaction time.
       /// &lt;/remarks&gt;
       const int requestBatchSize = 1000;

       /// &lt;summary&gt;
       /// The number of faults that may be seen in CDS before the operation is aborted and an exception is thrown.
       /// &lt;/summary&gt;
       /// &lt;remarks&gt;
       /// An occassional error due to contention when updating large tables in production is expected, so by default
       /// errors are logged and skipped. However, if a large number of errors are seen, ignoring those errors
       /// in subsequent batches gets expensive, and is usually indicative of a larger issue that should be addressed
       /// before continuing. Faulted requests are *not* retried, but would be picked up in a subsequent run of this script.
       /// &lt;/remarks&gt;
       const int maxFaultThreshold = 100;

       /// &lt;summary&gt;
       /// The maximum number of rows per business unit to export when simulating.
       /// &lt;/summary&gt;
       /// &lt;remarks&gt;
       /// During simulation, queries are not batched since doing so would require ordering and so be slightly
       /// different from the actual execution logic. To keep this the same between both paths, simulates are
       /// not batched and so a separate maximum number of rows per business unit can be specified.
       /// &lt;/remarks&gt;
       const int maxSimulateRecordsPerBusinessUnit = 10000;

       /// &lt;summary&gt;
       /// Whether or not operations should continue if any errors are encountered.
       /// &lt;/summary&gt;
       /// &lt;remarks&gt;
       /// This is different than setting maxFaultThreshold = 0, since the first batch of updates will be processed
       /// together. If continueOnError is true and maxFaultThreshold is 0, it is possible that multiple errors may
       /// be encountered and at the same time some rows successfully updated. In a healthy system when updating
       /// a higher number of rows, an occasional spurious error is expected, so it is recommended this be left as true.
       /// &lt;/remarks&gt;
       const bool continueOnError = true;

       #region private variables
       private static Dictionary&lt;string, EntityReference&gt; cachedCompanyReferences = new Dictionary&lt;string, EntityReference&gt;();
       #endregion

       /// &lt;summary&gt;
       /// The main execution loop of the program.
       /// &lt;/summary&gt;
       /// &lt;param name=&quot;args&quot;&gt;No arguments are expected.&lt;/param&gt;
       static void Main(string[] args)
       {
           if (args.Length != 1 &amp;&amp; args[0] != &quot;-simulate&quot; &amp;&amp; args[0] != &quot;-apply&quot;)
           {
               Console.WriteLine(&quot;Usage: BootstrapCompany -simulate&quot;);
               Console.WriteLine(&quot;       BootstrapCompany -apply&quot;);
               Console.WriteLine(&quot;The -simulate flag will create a file called simulation.csv in the working&quot;);
               Console.WriteLine(&quot;directory, but will not change any data. The -apply flag will update live data&quot;);
               Console.WriteLine(&quot;in the same way that was demonstrated in the simulation.&quot;);

               return;
           }

           bool isSimulate = args[0].Equals(&quot;-simulate&quot;, StringComparison.OrdinalIgnoreCase);

           // Delete the simulation or applied files if existing
           foreach (string existingSimulate in Directory.EnumerateFiles(Directory.GetCurrentDirectory(), $&quot;{(isSimulate ? &quot;simulation&quot; : &quot;applied&quot;)}_*.csv&quot;))
           {
               File.Delete(existingSimulate);
           }

           IOrganizationService orgService;

           // TODO: Provide your connection string details for your environment
           CrmServiceClient cdsConnection = new CrmServiceClient(&quot;AuthType=Office365;Username=youraliashere@yourdomainhere.com;Password=yourpasswordhere;URL=https://yourorganizationurlhere.crm.dynamics.com/;&quot;);
           orgService = (IOrganizationService)cdsConnection.OrganizationWebProxyClient != null ? (IOrganizationService)cdsConnection.OrganizationWebProxyClient : (IOrganizationService)cdsConnection.OrganizationServiceProxy;

           if (orgService != null)
           {
               // Get the current user ID to verify the connection was successful
               Guid userid = ((WhoAmIResponse)orgService.Execute(new WhoAmIRequest())).UserId;

               if (userid != Guid.Empty)
               {
                   Console.WriteLine(&quot;Connection Successful!&quot;);
               }

               // TODO: Provide a mapping of OwningBusinessUnit name to cdm_Company company ID. You can reuse
               // the same company ID for multiple business units if desired. In this example, it assumes that
               // the business unit named &quot;USMF&quot; is related to the company &quot;USMF&quot;. If all rows were owned
               // by the same root business unit, then the first field in the dictionary should be set to the 
               // name of the root business unit, usually the same value as the organization (eg, &quot;Contoso&quot;).
               Dictionary&lt;string, string&gt; businessUnitToCompanyMapping = new Dictionary&lt;string, string&gt;()
               {
                   { &quot;&quot;, &quot;USMF&quot; }, // The default mapping to use for any entity that doesn't have an owningbusinessunit field
                   { &quot;USMF&quot;, &quot;USMF&quot; },
                   { &quot;FRRT&quot;, &quot;FRRT&quot; },
               };

               // TODO: Provide a list of tables for which the company field should be backfilled based
               // on owning business unit. The list below represents all existing tables for which a cdm_Company
               // lookup field was added as part of the Finance and Operations dual write project.
               BatchUpdateEntity(orgService, &quot;account&quot;, &quot;msdyn_company&quot;, businessUnitToCompanyMapping, true, isSimulate, &quot;accountnumber&quot;, &quot;name&quot;);
               BatchUpdateEntity(orgService, &quot;contact&quot;, &quot;msdyn_company&quot;, businessUnitToCompanyMapping, true, isSimulate, &quot;fullname&quot;);
               // ... Add more here

               // Note, the product entity does not have an owningbusinessunit field like most other tables, so
               // assigning company by Business Unit is not applicable. In this case, whichever mapping specifies an
               // empty business unit will be used to categorize tables without an owningbusinessunit field.
               BatchUpdateEntity(orgService, &quot;product&quot;, &quot;msdyn_companyid&quot;, businessUnitToCompanyMapping, false, isSimulate, &quot;productnumber&quot;);
           }
           else
           {
               Console.WriteLine(&quot;Connection failed...&quot;);
           }

           Console.WriteLine(&quot;Done&quot;);
           Console.ReadLine();
       }

       /// &lt;summary&gt;
       /// Updates all incorrectly assigned company relationships for the specified entity.
       /// &lt;/summary&gt;
       /// &lt;param name=&quot;orgService&quot;&gt;The connection to CDS.&lt;/param&gt;
       /// &lt;param name=&quot;entityName&quot;&gt;The logical name of the entity to update.&lt;/param&gt;
       /// &lt;param name=&quot;companyFieldName&quot;&gt;The physical name of the field in the entity being updated which contains the cdm_Company id.&lt;/param&gt;
       /// &lt;param name=&quot;businessUnitToCompanyMapping&quot;&gt;A dictionary of business unit name to company code.&lt;/param&gt;
       /// &lt;param name=&quot;hasOwningBusinessUnit&quot;&gt;true if the entity has an owningbusinessunit field; otherwise, false.&lt;/param&gt;
       /// &lt;param name=&quot;isSimulate&quot;&gt;true to simulate output; otherwise, false.&lt;/param&gt;
       /// &lt;param name=&quot;fieldsToExport&quot;&gt;A set of fields to export into a CSV for this entity if simulating.&lt;/param&gt;
       /// &lt;returns&gt;true if the entity was successfully processed without any errors; otherwise, false.&lt;/returns&gt;
       private static bool BatchUpdateEntity(
           IOrganizationService orgService, 
           string entityName, 
           string companyFieldName, 
           Dictionary&lt;string, string&gt; businessUnitToCompanyMapping, 
           bool hasOwningBusinessUnit, 
           bool isSimulate, 
           params string[] fieldsToExport)
       {
           List&lt;Guid&gt; faultedIds = new List&lt;Guid&gt;();
           int totalRecordsProcessed = 0;
           Stopwatch stopwatch = new Stopwatch();
           stopwatch.Start();

           string fileName = isSimulate ? &quot;simulation&quot; : &quot;applied&quot;;
           StreamWriter simulationWriter = new StreamWriter(Path.Combine(Directory.GetCurrentDirectory(), $&quot;{fileName}_{entityName}.csv&quot;), true);
           simulationWriter.Write(&quot;EntityName,EntityId,&quot;);
           foreach (string fieldToExport in fieldsToExport)
           {
               simulationWriter.Write($&quot;{fieldToExport},&quot;);
           }
           simulationWriter.WriteLine(&quot;BusinessUnit,NewCompanyId&quot;);

           // Process each mapped business unit individually
           foreach (string businessUnitName in businessUnitToCompanyMapping.Keys)
           {
               Console.WriteLine(&quot;Updating any {0} rows for business unit {1} to company {2}...&quot;, entityName, businessUnitName, businessUnitToCompanyMapping[businessUnitName]);

               // The empty business unit value is only applicable for tables without an owning business unit field
               if (hasOwningBusinessUnit &amp;&amp; string.IsNullOrEmpty(businessUnitName))
               {
                   continue;
               }
               else if (!hasOwningBusinessUnit &amp;&amp; !string.IsNullOrEmpty(businessUnitName))
               {
                   continue;
               }

               var companyRef = GetCompanyReference(orgService, businessUnitToCompanyMapping[businessUnitName]);

               // Iteratively loop in batches to keep transaction lock size small
               bool moreRecordsExist = true;

               while (moreRecordsExist)
               {
                   moreRecordsExist = false;

                   // Find the first batch of rows for this business unit with the wrong company ID. Ordering
                   // is not explicity specified, but SQL will most likely process based on the index starting with
                   // company ID, since all new company ID fields added for Finance and Operations integration have
                   // also added a new index starting with company ID. Explicitly specifying order would reduce the
                   // query plan options for SQL and introduce unnecessary overhead.
                   QueryExpression query = new QueryExpression(entityName);
                   query.ColumnSet.AddColumns(companyFieldName);
                   foreach (string fieldToExport in fieldsToExport)
                   {
                       query.ColumnSet.AddColumn(fieldToExport);
                   }
                   query.Criteria.AddCondition(companyFieldName, ConditionOperator.NotEqual, companyRef.Id);

                   // TODO: Uncomment the line below if you only want to fill in companies that are empty
                   // as opposed to the line above which updates the company any time it differs from the 
                   // desired value
                   // query.Criteria.AddCondition(companyFieldName, ConditionOperator.Equal, Guid.Empty);

                   if (isSimulate)
                   {
                       // During simulation, get as a single block of rows to avoid positioning complexities
                       query.TopCount = maxSimulateRecordsPerBusinessUnit;
                   }
                   else
                   {
                       // Only batch rows during actual application, otherwise retrieve all as a single operation
                       query.TopCount = requestBatchSize + faultedIds.Count;
                   }

                   // For tables with an owning business unit, join based on business unit name
                   if (hasOwningBusinessUnit)
                   {
                       // TODO: Replace this logic with different algorithms to determine the correct company
                       // in situations where business unit is not the best way to categorize.
                       LinkEntity linkEntity = query.AddLink(&quot;businessunit&quot;, &quot;owningbusinessunit&quot;, &quot;businessunitid&quot;, JoinOperator.Inner);
                       linkEntity.Columns.AddColumns(&quot;name&quot;);
                       linkEntity.LinkCriteria.AddCondition(&quot;name&quot;, ConditionOperator.Equal, businessUnitName);
                   }

                   var multipleRequest = new ExecuteMultipleRequest()
                   {
                       Settings = new ExecuteMultipleSettings()
                       {
                           ContinueOnError = true,
                           ReturnResponses = true
                       },
                       Requests = new OrganizationRequestCollection()
                   };

                   EntityCollection result = orgService.RetrieveMultiple(query);

                   int rowsAddedToBatch = 0;

                   foreach (var entity in result.Entities)
                   {
                       // Skip any previously faulted ID's. These values will be re-queried with each batch
                       // which is inefficient, but is more efficient than passing hundreds of ID values to 
                       // the underlying SQL query to be skipped at the database level (assuming the 
                       // max fault count is relatively small).
                       if (faultedIds.Contains(entity.Id))
                       {
                           continue;
                       }

                       entity.Attributes[companyFieldName] = companyRef;
                       
                       UpdateRequest updateRequest = new UpdateRequest()
                       {
                           Target = entity
                       };

                       simulationWriter.Write($&quot;{entityName},{entity.Id},&quot;);
                       foreach (string fieldToExport in fieldsToExport)
                       {
                           simulationWriter.Write($&quot;{entity.Attributes[fieldToExport]},&quot;);
                       }
                       simulationWriter.WriteLine($&quot;{businessUnitName},{businessUnitToCompanyMapping[businessUnitName]}&quot;);

                       // Only add the update request when applying for real
                       if (!isSimulate)
                       {
                           multipleRequest.Requests.Add(updateRequest);
                       }

                       rowsAddedToBatch++;
                       Console.Write(&quot;.&quot;);
                   }

                   totalRecordsProcessed += rowsAddedToBatch;

                   if (rowsAddedToBatch &gt; 0 &amp;&amp; !isSimulate)
                   {
                       Console.Write(&quot;Sending {0} updates in a batch&quot;, rowsAddedToBatch);
                       var updateResult = orgService.Execute(multipleRequest) as ExecuteMultipleResponse;
                       moreRecordsExist = true;
                       Console.WriteLine(&quot; done&quot;);

                       // If any faults are encountered, flag those IDs to not be processed again
                       // in subsequent batches.
                       if (updateResult.IsFaulted)
                       {
                           foreach (var response in updateResult.Responses)
                           {
                               if (response.Fault != null)
                               {
                                   Console.WriteLine(response.Fault);
                                   faultedIds.Add(((UpdateRequest)multipleRequest.Requests[response.RequestIndex]).Target.Id);

                                   if (faultedIds.Count &gt; 100)
                                   {
                                       throw new ApplicationException(&quot;Excessive number of update failures, aborting operation&quot;);
                                   }
                               }
                           }
                       }
                   }
                   else
                   {
                       Console.WriteLine(&quot;No {0} rows remain to be updated for {1}-&gt;{2}&quot;, entityName, businessUnitName, businessUnitToCompanyMapping[businessUnitName]);
                   }
               }
           }

           simulationWriter.Close();
           simulationWriter = null;

           stopwatch.Stop();
           Console.WriteLine(&quot;Processed {0} rows for the {1} entity in {2}ms.&quot;, totalRecordsProcessed, entityName, stopwatch.ElapsedMilliseconds);

           return (faultedIds.Count == 0);
       }

       /// &lt;summary&gt;
       /// Gets an entity reference to the company with the specified ID if one exists.
       /// &lt;/summary&gt;
       /// &lt;param name=&quot;orgService&quot;&gt;The CDS connection.&lt;/param&gt;
       /// &lt;param name=&quot;companyId&quot;&gt;The company ID to search for.&lt;/param&gt;
       /// &lt;returns&gt;An entity reference if one exists; otherwise, null.&lt;/returns&gt;
       private static EntityReference GetCompanyReference(IOrganizationService orgService, string companyId)
       {
           if (cachedCompanyReferences.ContainsKey(companyId))
           {
               return cachedCompanyReferences[companyId];
           }

           QueryExpression query = new QueryExpression(&quot;cdm_company&quot;);
           query.ColumnSet.AddColumns(&quot;cdm_companyid&quot;);
           query.Criteria.AddCondition(&quot;cdm_companycode&quot;, ConditionOperator.Equal, companyId);
           query.TopCount = 1;

           EntityCollection result = orgService.RetrieveMultiple(query);

           EntityReference entityRef = null;

           foreach (var entity in result.Entities)
           {
               entityRef = entity.ToEntityReference();
               break;
           }

           cachedCompanyReferences[companyId] = entityRef;

           return entityRef;
       }
   }
}

</code></pre>
</article>
              </div>
              
<div class="hidden-sm col-md-3" role="complementary">
  <div class="sideaffix">
    <div class="contribution">
      <ul class="nav">
        <li>
          <a href="https://github.com/MicrosoftDocs/Dynamics-365-Operations.de-de/blob/live/articles/fin-ops-core/dev-itpro/data-entities/dual-write/bootstrap-company-data.md/#L1" class="contribution-link">Improve this Doc</a>
        </li>
      </ul>
    </div>
    <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
    <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
    </nav>
  </div>
</div>

            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Copyright � 2015-2017 Microsoft<br>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../../../styles/main.js"></script>
  </body>
</html>
